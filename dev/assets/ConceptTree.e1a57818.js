import{l as e,f as t,m as o,p as s,j as r,q as c,o as i,c as a,s as n,b as l,w as p,F as m,v as d,k as u,i as f,r as h,x as v}from"./app.d57fb543.js";import{_ as y}from"./ItemList.daa1996a.js";import{_ as w}from"./Arrow.812c1b03.js";import"./shared.99084317.js";const k=e({name:"ConceptTree",components:{ItemList:y,Arrow:w},props:{modelValue:{type:Object,default:null},concepts:{type:Array,required:!0},hierarchy:{type:Boolean,default:!0},itemListOptions:{type:Object,default:()=>({})}},emits:["select","open","close","update:modelValue"],setup(e,{emit:c}){const i=t({}),a=e=>{i[e.uri]=!0,c("open",e)},n=e=>{delete i[e.uri],c("close",e)},l=t=>{let o=[],s=t.concept,c=t.depth+1;if(s&&i[s.uri])for(let i of s.narrower||[]){let t={concept:i,depth:c,isSelected:r.exports.compare(e.modelValue,i)};o.push(t),o=o.concat(l(t))}return o};return{items:o((()=>{let t=[];for(let o of e.concepts){let s={concept:o,depth:0,isSelected:r.exports.compare(e.modelValue,o)};t.push(s),e.hierarchy&&(t=t.concat(l(s)))}return t})),isOpen:i,open:a,close:n,toggle:e=>{i[e.uri]?n(e):a(e)},jskos:s}},methods:{scrollToUri(e){this.$refs.itemList.scrollToUri(e)}}}),j=["onClick"],b={key:1,class:"jskos-vue-conceptTree-selectedOverlay"};k.render=function(e,t,o,s,r,y){const w=c("arrow"),k=c("item-list");return i(),a(m,null,[n(" ConceptTree is basically an extension of ItemList "),l(k,v({ref:"itemList"},e.itemListOptions,{class:{"jskos-vue-conceptTree":!0,"jskos-vue-conceptTree-noHierarchy":!e.hierarchy},items:e.items,"item-property":"concept",onSelect:t[0]||(t[0]=t=>{e.$emit("select",t),e.$emit("update:modelValue",t.item)})}),{beforeItem:p((({item:t})=>[n(" Use divs for depth spacers so we can have visual lines for the hierarchy "),(i(!0),a(m,null,d(t.depth,(e=>(i(),a("div",{key:e,class:"jskos-vue-conceptTree-depthSpacer"})))),128)),n(" Show arrow for concepts with narrower concepts "),e.hierarchy?(i(),a("div",{key:0,class:"jskos-vue-conceptTree-arrow",onClick:u((o=>e.toggle(t.concept)),["stop"])},[t.concept&&t.concept.narrower&&0!==t.concept.narrower.length?(i(),f(w,{key:0,direction:e.isOpen[t.concept.uri]?"down":"right",clickable:!0},null,8,["direction"])):n("v-if",!0)],8,j)):n("v-if",!0),n(" Highlight background for row if selected "),n(" Note: We're using a separate div here because we can't add a CSS class to an individual ItemList row "),t.isSelected?(i(),a("div",b)):n("v-if",!0),n(" Slot for additional content before item "),h(e.$slots,"beforeItem",{item:t.concept})])),afterItem:p((({item:t})=>[n(" Slot for additional content after item "),h(e.$slots,"afterItem",{item:t.concept})])),_:3},16,["class","items"])],2112)};export{k as _};
