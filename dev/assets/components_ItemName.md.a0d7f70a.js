import{D as n,d as a,g as s,o as t,c as p,q as o,e,t as c,F as l,E as u,w as i,b as k,z as r,x as d,C as g,a as m}from"./app.e45e6cd8.js";import"./shared.73f3a6f3.js";const h=n({label:[],processLabel(n,a){for(let s of this.label)n=s(n,a);return n},notation:[],processNotation(n,a){for(let s of this.notation)n=s(n,a);return n}}),f=a({name:"ItemName",props:{item:{type:Object,required:!0},showNotation:{type:Boolean,default:!0},showLabel:{type:Boolean,default:!0},fallbackLabel:{type:String,default:"???"},language:{type:String,default:""},clickable:{type:Boolean,default:!1}},setup(n){const a=s((()=>n.showNotation?h.processNotation(u.exports.notation(n.item),n):"")),t=s((()=>n.showLabel?h.processLabel(u.exports.prefLabel(n.item,{fallbackToUri:!a.value,language:n.language||u.exports.languagePreference.selectLanguage(n.item.prefLabel)}),n):""));return{notation:a,label:t}}});f.addLabelPlugin=n=>{h.label.push(n)},f.addNotationPlugin=n=>{h.notation.push(n)};const b=f,q=i()(((n,a,s,u,i,k)=>(t(),p("span",{class:{"jskos-vue-itemName":!0,clickable:n.clickable}},[n.showNotation||""===n.label?(t(),p("span",{key:0,class:"jskos-vue-itemName-notation",innerHTML:n.notation},null,8,["innerHTML"])):o("v-if",!0),e(" "+c(n.label)+" ",1),""===n.notation&&""===n.label?(t(),p(l,{key:1},[e(c(n.fallbackLabel),1)],2112)):o("v-if",!0)],2))));b.render=q,b.__scopeId="data-v-28cc3d02";const v=m('<h1 id="itemname"><a class="header-anchor" href="#itemname" aria-hidden="true">#</a> ItemName</h1><p>Represents a JSKOS item (concept or concept scheme) with its notation and label.</p><h2 id="props"><a class="header-anchor" href="#props" aria-hidden="true">#</a> Props</h2><ul><li><code>item</code> (object) - JSKOS item <ul><li>required</li></ul></li><li><code>showNotation</code> (boolean) - whether to show the item&#39;s notation <ul><li>default: <code>true</code></li></ul></li><li><code>showLabel</code> (boolean) - whether to show the item&#39;s label (<code>prefLabel</code>) <ul><li>default: <code>true</code></li></ul></li><li><code>fallbackLabel</code> (string) - string that will be shown if both notation and label are empty <ul><li>default: &quot;???&quot;</li></ul></li><li><code>language</code> (string) - preferred language for the label <ul><li>default: uses <a href="https://gbv.github.io/jskos-tools/#languagepreference" target="_blank" rel="noopener noreferrer">jskos-tools&#39; languagePreference</a></li></ul></li><li><code>clickable</code> (boolean) - adjusts mouse pointer and text decoration on hover if <code>true</code><ul><li>default: <code>false</code></li></ul></li></ul><h2 id="slots"><a class="header-anchor" href="#slots" aria-hidden="true">#</a> Slots</h2><p>None</p><h2 id="methods"><a class="header-anchor" href="#methods" aria-hidden="true">#</a> Methods</h2><p>None</p><h2 id="events"><a class="header-anchor" href="#events" aria-hidden="true">#</a> Events</h2><p>None</p><h2 id="plugins-for-notations-and-labels"><a class="header-anchor" href="#plugins-for-notations-and-labels" aria-hidden="true">#</a> Plugins for notations and labels</h2><p>You can adjust how notations/labels are processed in <code>ItemName</code> by providing plugins. A plugin is a simple function that receives the current label/notation and the component&#39;s props as parameters and returns the processed label/notation. Plugins can be added on the imported component directly using the provided <code>addLabelPlugin</code> and <code>addNotationPlugin</code> methods.</p><p>For example, you can use the following snippet to add trailing zeros to DDC notations in the first two levels:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ItemName <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;jskos-vue&quot;</span>\nItemName<span class="token punctuation">.</span><span class="token function">addNotationPlugin</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">notation<span class="token punctuation">,</span> <span class="token punctuation">{</span> item <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> fill <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>\n  <span class="token comment">// For DDC and SDNB only: fill number notation with trailing zeros</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>jskos<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    uri <span class="token operator">:</span> <span class="token string">&quot;http://dewey.info/scheme/edition/e23/&quot;</span><span class="token punctuation">,</span>\n    identifier <span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token string">&quot;http://bartoc.org/en/node/241&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;http://bartoc.org/en/node/18497&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;http://www.wikidata.org/entity/Q67011877&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;http://id.loc.gov/vocabulary/classSchemes/sdnb&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;http://uri.gbv.de/terminology/sdnb&quot;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>inScheme <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span>inScheme<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>notation<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>notation<span class="token punctuation">.</span>length <span class="token operator">+</span> fill<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      fill <span class="token operator">+=</span> <span class="token string">&quot;0&quot;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>fill<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Using the shared `jskos-vue-text-lightGrey` CSS class</span>\n    notation <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;span class=&#39;jskos-vue-text-lightGrey&#39;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fill<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span&gt;</span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> notation\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="examples"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2>',15),y=e(" Change language: "),w=e(" - "),x=m('<div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>\n    Change language:\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span>\n      <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(language, index) in state.languages<span class="token punctuation">&quot;</span></span>\n      <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>index<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span>\n        <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span>\n        <span class="token attr-name">@click.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>state.languages.move(index, 0)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        {{ language }}\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span> -\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span>\n      <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(concept, index) in concepts<span class="token punctuation">&quot;</span></span>\n      <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>index<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item-name</span> <span class="token attr-name">:item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>concept<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ItemName <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;jskos-vue&quot;</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> jskos <span class="token keyword">from</span> <span class="token string">&quot;jskos-tools&quot;</span>\n\n<span class="token comment">// Setup jskos-tools&#39; languagePreference</span>\n<span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  languages<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;en&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;de&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;fr&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\njskos<span class="token punctuation">.</span>languagePreference<span class="token punctuation">.</span>store <span class="token operator">=</span> state\njskos<span class="token punctuation">.</span>languagePreference<span class="token punctuation">.</span>path <span class="token operator">=</span> <span class="token string">&quot;languages&quot;</span>\n\n<span class="token comment">// Add move method to arrays</span>\n<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">move</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">from<span class="token punctuation">,</span> to</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> concept1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  notation<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;EX&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> concept2 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  notation<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;EX&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  prefLabel<span class="token operator">:</span> <span class="token punctuation">{</span>\n    en<span class="token operator">:</span> <span class="token string">&quot;Example&quot;</span><span class="token punctuation">,</span>\n    de<span class="token operator">:</span> <span class="token string">&quot;Beispiel&quot;</span><span class="token punctuation">,</span>\n    fr<span class="token operator">:</span> <span class="token string">&quot;Exemple&quot;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> concept3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> concepts <span class="token operator">=</span> <span class="token punctuation">[</span>\n  concept1<span class="token punctuation">,</span>\n  concept2<span class="token punctuation">,</span>\n  concept3<span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div>',1),N='{"title":"ItemName","description":"","frontmatter":{},"headers":[{"level":2,"title":"Props","slug":"props"},{"level":2,"title":"Slots","slug":"slots"},{"level":2,"title":"Methods","slug":"methods"},{"level":2,"title":"Events","slug":"events"},{"level":2,"title":"Plugins for notations and labels","slug":"plugins-for-notations-and-labels"},{"level":2,"title":"Examples","slug":"examples"}],"relativePath":"components/ItemName.md","lastUpdated":1624875566924}',_={};const j=Object.assign(_,{expose:[],setup:function(a){const s=n({languages:["en","de","fr"]});u.exports.languagePreference.store=s,u.exports.languagePreference.path="languages",Array.prototype.move=function(n,a){return this.splice(a,0,this.splice(n,1)[0]),this};const o=[{notation:["EX"]},{notation:["EX"],prefLabel:{en:"Example",de:"Beispiel",fr:"Exemple"}},{}];return(n,a)=>(t(),p("div",null,[v,k("p",null,[y,(t(!0),p(l,null,r(g(s).languages,((n,a)=>(t(),p("span",{key:a},[k("a",{href:"",onClick:d((n=>g(s).languages.move(a,0)),["prevent"])},c(n),9,["onClick"]),w])))),128))]),k("ul",null,[(t(),p(l,null,r(o,((n,a)=>k("li",{key:a},[k(b,{item:n},null,8,["item"])]))),64))]),x]))}});export default j;export{N as __pageData};
